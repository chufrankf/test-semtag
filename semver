#!/usr/bin/env bash

# From semver.org, convert PCRE regex to bash extended expressions
# https://unix.stackexchange.com/questions/421460/bash-regex-and-https-regex101-com
SEMVER_CAPTURE_GROUP="^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\-?([0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?\+?([0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$"

HELP="\
Usage:
  $PROG
  $PROG get
  $PROG --help (-h)
Commands:
  get        Returns the current version, based on the latest one, if there are uncommited or
               unstaged changes, they will be reflected in the version, adding the number of
               pending commits, current branch and commit hash."

# Commands and options
ACTION="get"
ACTION="$1"
shift

# We get the parameters
while getopts "h" opt; do
  case $opt in
    h)
      echo -e "$HELP"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

# Gets a string with the version and returns an array of maximum size of 5 with all the parts of the semantic version
# $1 The string containing the version in semantic format
# $2 The variable to store the result array:
#      position 0: major
#      position 1: minor
#      position 2: patch
#      position 3: prerelease
#      position 4: metadata
function explode_version {
  local version=$1
  local result=$2
  if [[ $version =~ $SEMVER_CAPTURE_GROUP ]] ; then
    local major=${BASH_REMATCH[1]}
    local minor=${BASH_REMATCH[2]}
    local patch=${BASH_REMATCH[3]}
    local prerelease=${BASH_REMATCH[4]}
    local metadata=${BASH_REMATCH[5]}
    eval "$result=(\"$major\" \"$minor\" \"$patch\" \"$prerelease\" \"$metadata\")"
  fi
  return 0
}

# Gets the current semantic version from git describe
# <tag.major>.<tag.minor>.<tag.patch>-<tag.prerelease|dev>[.<changes>]+[<tag.metadata>.]<branch>.<commit_hash>
# $1 the variable to store the resulting version
function get {
  local result=$1
  local tag="$(git describe --tags --abbrev=0)"

  explode_version $tag semver
  if [[ -z "$semver" ]] ; then
    echo "ERROR: $1 does not meet semantic versioning patterns"
    exit 1
  fi

  local branch="$(git rev-parse --abbrev-ref HEAD)"
  local changes_count="$(git rev-list ${tag}.. --count)"
  local commit_hash="$(git rev-parse --short HEAD)"
  local major="${semver[0]}"
  local minor="${semver[1]}"
  local patch="${semver[2]}"
  local prerelease="${semver[3]}"
  local metadata="${semver[4]}"

  if [ "$changes_count" -ge "1" ]; then
    prerelease="${prerelease:-"dev"}.$changes_count"
  fi

  eval "$result=\"$major.$minor.$patch${prerelease:+"-$prerelease"}+${metadata:+"$metadata."}${branch}.${commit_hash}\""

}

case $ACTION in
  -h|--help)
    echo -e "$HELP"
    ;;
  get)
    get current
    echo "$current"
    ;;
  *)
    echo "'$ACTION' is not a valid command, see --help for available commands."
    ;;
esac

